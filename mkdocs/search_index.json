{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Android Platform\n\n\nSiddhi Android Platform is a wrapper for Siddhi. It allows android developers to embed Siddhi as a service. \nSiddhi is a java library that listens to events from data streams, detects complex conditions described via a \nStreaming\n SQL language\n, and triggers actions. It performs both \nStream Processing\n and \nComplex Event Processing\n.  \n\n\nOverview\n\n\n\n\n\n\nSiddhi Android Platform supports the following:\n\n\n\n\nQuery data from Android sensors and internal Android events\n\n\nGenerating notifications in Android environment\n\n\nData preprocessing\n\n\nGenerating alerts based on thresholds\n\n\nCalculating aggregations over a short window or a long time period\n\n\nJoining multiple data streams\n\n\nCorrelating data while finding missing and erroneous events\n\n\nInteracting streaming data with databases\n\n\nDetecting temporal event patterns\n\n\nTracking (something over space or time)\n\n\nAnalyzing trends (rise, fall, turn, tipple bottom)\n\n\nMaking real-time predictions with existing and online machine learning models\n\n\nAnd many more ...  For more information, see \nPatterns of Streaming Realtime Analytics\n\n\n\n\nSiddhi Android Platform is free and open source, under \nApache Software License v2.0\n.\n\n\nGet Started!\n\n\nGet started with Siddhi Android Platform in a few minutes by following the \nSiddhi Android Platform Quick Start Guide\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\nSiddhi Android Platform Branch\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\nHow to Contribute\n\n\n\n\nReport issues at \nGitHub Issue Tracker\n.\n\n\nFeel free to try out the \nSiddhi source code\n and send your contributions as pull requests to the \nmaster branch\n. \n\n\n\n\nContact us\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\nFor more details and support contact us via \nhttp://wso2.com/support/\n\n\n\n\nSupport\n\n\n\n\nWe are committed to ensuring support for Siddhi (with its \nextensions\n) and \nWSO2 Stream Processor\n from development to production. \n\n\nOur unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\nFor more details and to take advantage of this unique opportunity, contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to Siddhi Android Platform"
        }, 
        {
            "location": "/#siddhi-android-platform", 
            "text": "Siddhi Android Platform is a wrapper for Siddhi. It allows android developers to embed Siddhi as a service. \nSiddhi is a java library that listens to events from data streams, detects complex conditions described via a  Streaming\n SQL language , and triggers actions. It performs both  Stream Processing  and  Complex Event Processing .", 
            "title": "Siddhi Android Platform"
        }, 
        {
            "location": "/#overview", 
            "text": "Siddhi Android Platform supports the following:   Query data from Android sensors and internal Android events  Generating notifications in Android environment  Data preprocessing  Generating alerts based on thresholds  Calculating aggregations over a short window or a long time period  Joining multiple data streams  Correlating data while finding missing and erroneous events  Interacting streaming data with databases  Detecting temporal event patterns  Tracking (something over space or time)  Analyzing trends (rise, fall, turn, tipple bottom)  Making real-time predictions with existing and online machine learning models  And many more ...  For more information, see  Patterns of Streaming Realtime Analytics   Siddhi Android Platform is free and open source, under  Apache Software License v2.0 .", 
            "title": "Overview"
        }, 
        {
            "location": "/#get-started", 
            "text": "Get started with Siddhi Android Platform in a few minutes by following the  Siddhi Android Platform Quick Start Guide", 
            "title": "Get Started!"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Siddhi Android Platform Branch  Jenkins Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Report issues at  GitHub Issue Tracker .  Feel free to try out the  Siddhi source code  and send your contributions as pull requests to the  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .   For more details and support contact us via  http://wso2.com/support/", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for Siddhi (with its  extensions ) and  WSO2 Stream Processor  from development to production.   Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.   For more details and to take advantage of this unique opportunity, contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/", 
            "text": "Android Siddhi Platform provides a android service that can execute Siddhi apps. Siddhi apps has capability of gathering data and events, process them and trigger actions. By this platform those capabilities are extended to Android environment.  \n\n\nStep 1: Creating Android Project\n\n\n\n\nCreate Android App with the minimum API level 19\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 2: Add required repositories to project build.gradle\n\n\nTo the Project level build gradle add WSO2 nexus repository and the jitpack repository\n\n\nallprojects\n \n{\n\n   \nrepositories\n \n{\n\n       \ngoogle\n()\n\n       \njcenter\n()\n\n       \nmaven\n \n{\n \nurl\n \nhttp://maven.wso2.org/nexus/content/groups/wso2-public/\n \n}\n\n   \n}\n\n\n}\n\n\n\n\n\n\nStep 3: Add required dependencies to module build.gradle\n\n\nimplementation\n(\norg.wso2.siddhi:siddhi-core:4.0.0-M86\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nannotationProcessor\n(\norg.wso2.siddhi:siddhi-annotations:4.0.0-M86\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n(\norg.wso2.siddhi:siddhi-annotations:4.0.0-M86\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n(\norg.wso2.siddhi:siddhi-query-api:4.0.0-M86\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n(\norg.wso2.siddhi:siddhi-query-compiler:4.0.0-M86\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n(\norg.wso2.extension.siddhi.map.text:siddhi-map-text:1.0.2\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n(\norg.wso2.extension.siddhi.map.keyvalue:siddhi-map-keyvalue:1.0.1\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n \ncom.google.guava:guava:19.0\n\n\nimplementation\n(\norg.apache.log4j.wso2:log4j:1.2.17.wso2v1\n)\n \n{\n\n   \ntransitive\n \n=\n \nfalse\n\n\n}\n\n\nimplementation\n \norg.osgi:org.osgi.core:6.0.0\n\n\nimplementation\n \norg.wso2.orbit.com.lmax:disruptor:3.3.2.wso2v2\n\n\nimplementation\n \norg.antlr:antlr4-runtime:4.5.1\n\n\n\n\n\n\nNext you have to add android libraries Siddhi Android Platfoorm and Siddhi IO Android. To add these you can either locally build them or get from the public repository.\nTo get from public repository add following dependencies\n\n\nimplementation\n \norg.wso2.siddhi.android.platform:siddhi-android-platform:1.0.0\n\n\nimplementation\n \norg.wso2.siddhi.extension.io.android:siddhi-io-android:1.0.0\n\n\n\n\n\n\nTo locally build, clone the required repos and do a gradle build \n\n\ngit clone https://github.com/wso2-extensions/siddhi-io-android.git\ngit clone https://github.com/wso2/siddhi-android-platform.git\n\n\n\n\n\nThen execute gradle build command. This will create aar files in build/outpus/aar directory. \nThen from android studio add these aar files to your project. \n\n\n\n\n\n\nStep 4: Set build configurations for the app\n\n\nSet packaging options \n\n\ncompileOptions\n \n{\n\n   \nsourceCompatibility\n \nJavaVersion\n.\nVERSION_1_8\n\n   \ntargetCompatibility\n \nJavaVersion\n.\nVERSION_1_8\n\n\n}\n\n\npackagingOptions\n \n{\n\n   \npickFirst\n \nMETA-INF/DEPENDENCIES\n\n   \nmerge\n \nMETA-INF/annotations/org.wso2.siddhi.annotation.Extension\n\n\n}\n\n\n\n\n\n\nTo enable multidex add following lines to defaultConfig block in the module level build.gradle. \n\n\nmultiDexEnabled\n \ntrue\n\n\nandroid\n.\ndefaultConfig\n.\njavaCompileOptions\n.\nannotationProcessorOptions\n.\nincludeCompileClasspath\n \n=\n \ntrue\n\n\n\n\n\n\nNow you are ready to execute Siddhi Apps in Android Platform. \n\n\nStep 5: Build user interface\n\n\nCreate the user interface to start and stop the Siddhi App. Edit the layout for MainActivity. \n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nandroid.support.constraint.ConstraintLayout\n\n       \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n       \nxmlns:tools=\nhttp://schemas.android.com/tools\n\n       \nxmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n       \nandroid:layout_width=\nmatch_parent\n\n       \nandroid:layout_height=\nmatch_parent\n\n       \ntools:context=\ncom.example.chamath.simplesiddhi.MainActivity\n\n\n   \nButton\n\n           \nandroid:text=\nStart App\n\n           \nandroid:layout_width=\nwrap_content\n\n           \nandroid:layout_height=\nwrap_content\n\n           \nandroid:id=\n@+id/button2\n\n           \nandroid:layout_marginTop=\n8dp\n \napp:layout_constraintTop_toTopOf=\nparent\n\n           \napp:layout_constraintEnd_toEndOf=\nparent\n \nandroid:layout_marginEnd=\n8dp\n\n           \napp:layout_constraintStart_toStartOf=\nparent\n \nandroid:layout_marginStart=\n8dp\n\n           \napp:layout_constraintBottom_toBottomOf=\nparent\n \nandroid:layout_marginBottom=\n8dp\n\n           \napp:layout_constraintHorizontal_bias=\n0.501\n\n           \napp:layout_constraintVertical_bias=\n0.398\n \nandroid:onClick=\nstartApp\n/\n\n   \nButton\n\n           \nandroid:text=\nStop App\n\n           \nandroid:layout_width=\nwrap_content\n\n           \nandroid:layout_height=\nwrap_content\n\n           \nandroid:id=\n@+id/button3\n\n           \nandroid:layout_marginTop=\n8dp\n \napp:layout_constraintTop_toBottomOf=\n@+id/button2\n\n           \napp:layout_constraintEnd_toEndOf=\nparent\n \nandroid:layout_marginEnd=\n8dp\n\n           \napp:layout_constraintStart_toStartOf=\nparent\n \nandroid:layout_marginStart=\n8dp\n\n           \nandroid:onClick=\nstopApp\n/\n\n\n/android.support.constraint.ConstraintLayout\n\n\n\n\n\n\nStep 6: Bind with the Siddhi Android Platform Service\n\n\nTo execute Siddhi Apps, SimpleSiddhi App should be connected to the Android SiddhiService and then get a reference to that service so it can execute methods. For that first create required SiddhiAppController instance and ServiceConnection objects. \n\n\nprivate\n \nSiddhiAppController\n \nappController\n;\n\n\nprivate\n \nServiceConnection\n \nserviceConnection\n \n=\n \nnew\n \nServiceConnection\n()\n \n{\n\n   \n@Override\n\n   \npublic\n \nvoid\n \nonServiceConnected\n(\nComponentName\n \nname\n,\n \nIBinder\n \nservice\n)\n \n{\n\n       \nappController\n \n=\n \nSiddhiAppController\n.\nStub\n.\nasInterface\n(\nservice\n);\n\n   \n}\n\n\n   \n@Override\n\n   \npublic\n \nvoid\n \nonServiceDisconnected\n(\nComponentName\n \nname\n)\n \n{\n\n       \nappController\n \n=\n \nnull\n;\n\n   \n}\n\n\n};\n\n\n\n\n\n\nThen invoke the service in onCreate of the Activity. \n\n\nIntent\n \nintent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \nSiddhiAppService\n.\nclass\n);\n\n\nstartService\n(\nintent\n);\n\n\nbindService\n(\nintent\n,\nserviceConnection\n,\nBIND_AUTO_CREATE\n);\n\n\n\n\n\n\nStep 7: Implement Functionality\n\n\nCreate the Siddhi App \n\n\nprivate\n \nString\n \napp\n \n=\n \n@app:name(\nfoo\n)@source(type=\nandroid-humidity\n, @map(type=\nkeyvalue\n,\n \n+\n\n       \nfail.on.missing.attribute=\nfalse\n,@attributes(sensor=\nsensor\n,vector=\nhumidity\n)))\n \n+\n\n       \ndefine stream sensorInStream ( sensor string, vector float);\n \n+\n\n       \n@sink(type=\nandroid-notification\n , title=\nDetails\n,multiple.notifications = \ntrue\n,\n \n+\n\n       \n @map(type=\nkeyvalue\n))define stream outputStream (sensor string, vector float); \n \n+\n\n       \nfrom sensorInStream select * insert into outputStream\n;\n\n\n\n\n\n\nAnd finally you implement the startApp and stopApp functions.\n\n\nprivate\n \nString\n \nappName\n;\n\n\npublic\n \nvoid\n \nstartApp\n(\nView\n \nview\n)\n \nthrows\n \nRemoteException\n{\n\n   \nappName\n \n=\n \nappController\n.\nstartSiddhiApp\n(\napp\n);\n\n\n}\n\n\npublic\n \nvoid\n \nstopApp\n(\nView\n \nview\n)\n \nthrows\n \nRemoteException\n{\n\n   \nappController\n.\nstopSiddhiApp\n(\nappName\n);\n\n\n}\n\n\n\n\n\n\nRun the app in emulator. Click the Send App button it will execute the app and will generate notifications for humidity sensor changes.  \n\n\nFor more information about writing Siddhi Apps visit \nhere", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-1-creating-android-project", 
            "text": "Create Android App with the minimum API level 19", 
            "title": "Step 1: Creating Android Project"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-2-add-required-repositories-to-project-buildgradle", 
            "text": "To the Project level build gradle add WSO2 nexus repository and the jitpack repository  allprojects   { \n    repositories   { \n        google () \n        jcenter () \n        maven   {   url   http://maven.wso2.org/nexus/content/groups/wso2-public/   } \n    }  }", 
            "title": "Step 2: Add required repositories to project build.gradle"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-3-add-required-dependencies-to-module-buildgradle", 
            "text": "implementation ( org.wso2.siddhi:siddhi-core:4.0.0-M86 )   { \n    transitive   =   false  }  annotationProcessor ( org.wso2.siddhi:siddhi-annotations:4.0.0-M86 )   { \n    transitive   =   false  }  implementation ( org.wso2.siddhi:siddhi-annotations:4.0.0-M86 )   { \n    transitive   =   false  }  implementation ( org.wso2.siddhi:siddhi-query-api:4.0.0-M86 )   { \n    transitive   =   false  }  implementation ( org.wso2.siddhi:siddhi-query-compiler:4.0.0-M86 )   { \n    transitive   =   false  }  implementation ( org.wso2.extension.siddhi.map.text:siddhi-map-text:1.0.2 )   { \n    transitive   =   false  }  implementation ( org.wso2.extension.siddhi.map.keyvalue:siddhi-map-keyvalue:1.0.1 )   { \n    transitive   =   false  }  implementation   com.google.guava:guava:19.0  implementation ( org.apache.log4j.wso2:log4j:1.2.17.wso2v1 )   { \n    transitive   =   false  }  implementation   org.osgi:org.osgi.core:6.0.0  implementation   org.wso2.orbit.com.lmax:disruptor:3.3.2.wso2v2  implementation   org.antlr:antlr4-runtime:4.5.1   Next you have to add android libraries Siddhi Android Platfoorm and Siddhi IO Android. To add these you can either locally build them or get from the public repository.\nTo get from public repository add following dependencies  implementation   org.wso2.siddhi.android.platform:siddhi-android-platform:1.0.0  implementation   org.wso2.siddhi.extension.io.android:siddhi-io-android:1.0.0   To locally build, clone the required repos and do a gradle build   git clone https://github.com/wso2-extensions/siddhi-io-android.git\ngit clone https://github.com/wso2/siddhi-android-platform.git  Then execute gradle build command. This will create aar files in build/outpus/aar directory. \nThen from android studio add these aar files to your project.", 
            "title": "Step 3: Add required dependencies to module build.gradle"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-4-set-build-configurations-for-the-app", 
            "text": "Set packaging options   compileOptions   { \n    sourceCompatibility   JavaVersion . VERSION_1_8 \n    targetCompatibility   JavaVersion . VERSION_1_8  }  packagingOptions   { \n    pickFirst   META-INF/DEPENDENCIES \n    merge   META-INF/annotations/org.wso2.siddhi.annotation.Extension  }   To enable multidex add following lines to defaultConfig block in the module level build.gradle.   multiDexEnabled   true  android . defaultConfig . javaCompileOptions . annotationProcessorOptions . includeCompileClasspath   =   true   Now you are ready to execute Siddhi Apps in Android Platform.", 
            "title": "Step 4: Set build configurations for the app"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-5-build-user-interface", 
            "text": "Create the user interface to start and stop the Siddhi App. Edit the layout for MainActivity.   ?xml version= 1.0  encoding= utf-8 ?  android.support.constraint.ConstraintLayout \n        xmlns:android= http://schemas.android.com/apk/res/android \n        xmlns:tools= http://schemas.android.com/tools \n        xmlns:app= http://schemas.android.com/apk/res-auto \n        android:layout_width= match_parent \n        android:layout_height= match_parent \n        tools:context= com.example.chamath.simplesiddhi.MainActivity \n\n    Button \n            android:text= Start App \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content \n            android:id= @+id/button2 \n            android:layout_marginTop= 8dp   app:layout_constraintTop_toTopOf= parent \n            app:layout_constraintEnd_toEndOf= parent   android:layout_marginEnd= 8dp \n            app:layout_constraintStart_toStartOf= parent   android:layout_marginStart= 8dp \n            app:layout_constraintBottom_toBottomOf= parent   android:layout_marginBottom= 8dp \n            app:layout_constraintHorizontal_bias= 0.501 \n            app:layout_constraintVertical_bias= 0.398   android:onClick= startApp / \n    Button \n            android:text= Stop App \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content \n            android:id= @+id/button3 \n            android:layout_marginTop= 8dp   app:layout_constraintTop_toBottomOf= @+id/button2 \n            app:layout_constraintEnd_toEndOf= parent   android:layout_marginEnd= 8dp \n            app:layout_constraintStart_toStartOf= parent   android:layout_marginStart= 8dp \n            android:onClick= stopApp /  /android.support.constraint.ConstraintLayout", 
            "title": "Step 5: Build user interface"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-6-bind-with-the-siddhi-android-platform-service", 
            "text": "To execute Siddhi Apps, SimpleSiddhi App should be connected to the Android SiddhiService and then get a reference to that service so it can execute methods. For that first create required SiddhiAppController instance and ServiceConnection objects.   private   SiddhiAppController   appController ;  private   ServiceConnection   serviceConnection   =   new   ServiceConnection ()   { \n    @Override \n    public   void   onServiceConnected ( ComponentName   name ,   IBinder   service )   { \n        appController   =   SiddhiAppController . Stub . asInterface ( service ); \n    } \n\n    @Override \n    public   void   onServiceDisconnected ( ComponentName   name )   { \n        appController   =   null ; \n    }  };   Then invoke the service in onCreate of the Activity.   Intent   intent   =   new   Intent ( this ,   SiddhiAppService . class );  startService ( intent );  bindService ( intent , serviceConnection , BIND_AUTO_CREATE );", 
            "title": "Step 6: Bind with the Siddhi Android Platform Service"
        }, 
        {
            "location": "/documentation/siddhi-android-platform-quickstart/#step-7-implement-functionality", 
            "text": "Create the Siddhi App   private   String   app   =   @app:name( foo )@source(type= android-humidity , @map(type= keyvalue ,   + \n        fail.on.missing.attribute= false ,@attributes(sensor= sensor ,vector= humidity )))   + \n        define stream sensorInStream ( sensor string, vector float);   + \n        @sink(type= android-notification  , title= Details ,multiple.notifications =  true ,   + \n         @map(type= keyvalue ))define stream outputStream (sensor string, vector float);    + \n        from sensorInStream select * insert into outputStream ;   And finally you implement the startApp and stopApp functions.  private   String   appName ;  public   void   startApp ( View   view )   throws   RemoteException { \n    appName   =   appController . startSiddhiApp ( app );  }  public   void   stopApp ( View   view )   throws   RemoteException { \n    appController . stopSiddhiApp ( appName );  }   Run the app in emulator. Click the Send App button it will execute the app and will generate notifications for humidity sensor changes.    For more information about writing Siddhi Apps visit  here", 
            "title": "Step 7: Implement Functionality"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}